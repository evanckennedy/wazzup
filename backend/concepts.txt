Schema: Defines the structure of the documents within a collection, including field names, types, and validation rules.
  - Analogy: Blueprint or design of a house

Model: A higher-level abstraction that provides an interface to interact with the database. It is created using a schema and includes methods for querying and manipulating the data.
  - Analogy: The actual house build from the blueprint, which you can live in and interact with

Controller: 
- Handles incoming HTTP requests, that is, processes them and returns HTTP responses
- Acts as an intermediary between the client and the application logic
- Controllers often:
  - Parse request data.
  - Call the appropriate service functions.
  - Handle HTTP response codes and messages.
  - Manage session and authentication.

Service:
- Business logic of the application
- Performs operations such as data manipulation, validation, and interaction
  the database
- Typically called by the controller to carry out tasks

JSDoc comments:
- A type of comment used to document JavaScript code
- Markup language used to annotate JavaScript code with documentation comments
- Can be parsed by tools to generate documentation.
- Brief guide of JSDoc syntax:
  - Start with /** to begin a JSDoc comment block.
  - Use @ followed by a tag (like file, module, typedef, property, etc.) to 
    specify the type of documentation.
  - Write a brief description of the documented code.
  - Use {} to specify types, like {string} or {mongoose.Schema.Types.ObjectId}.
  - Close the comment block with */.

HTTP status code categories:
  1xx - Informational
    Request received, processing ongoing (e.g., 100 Continue)
  2xx - Success
    Request successful, resource created or retrieved (e.g., 200 OK, 201 Created)
  3xx - Redirection
    Request redirected to another URL (e.g., 301 Moved Permanently, 302 Found)
  4xx - Client Error
    Request invalid or cannot be processed (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found)
  5xx - Server Error
    Server failed to process request (e.g., 500 Internal Server Error, 502 Bad Gateway)

API Endpoint:
  - A specific URL (route) that handles a specific request or action
  - A point of interaction between a client (e.g., web app, mobile app) and a server
  - Defines a specific operation, such as creating, reading, updating, or deleting data
  - Typically responds with data in a format like JSON or XML